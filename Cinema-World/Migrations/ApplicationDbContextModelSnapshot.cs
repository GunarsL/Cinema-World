// <auto-generated />
using Cinema_World.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Cinema_World.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Cinema_World.Models.Actor_CinematographyModel", b =>
                {
                    b.Property<int>("ActorID")
                        .HasColumnType("int");

                    b.Property<int>("CinematographyID")
                        .HasColumnType("int");

                    b.HasKey("ActorID", "CinematographyID");

                    b.HasIndex("CinematographyID");

                    b.ToTable("Actors_Cinematography");
                });

            modelBuilder.Entity("Cinema_World.Models.ActorModel", b =>
                {
                    b.Property<int>("ActorID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ActorID"), 1L, 1);

                    b.Property<string>("BirthPlace")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("BirthYear")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MiddleName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ActorID");

                    b.ToTable("Actors");
                });

            modelBuilder.Entity("Cinema_World.Models.CinematographyCategory_CinematographyModel", b =>
                {
                    b.Property<int>("CinematographyCategoryID")
                        .HasColumnType("int");

                    b.Property<int>("CinematographyID")
                        .HasColumnType("int");

                    b.HasKey("CinematographyCategoryID", "CinematographyID");

                    b.HasIndex("CinematographyID");

                    b.ToTable("CinematographyCategories_Cinematography");
                });

            modelBuilder.Entity("Cinema_World.Models.CinematographyCategoryModel", b =>
                {
                    b.Property<int>("CategoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryID"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CategoryID");

                    b.ToTable("CinematographyCategories");
                });

            modelBuilder.Entity("Cinema_World.Models.CinematographyGenreModel", b =>
                {
                    b.Property<int>("GenreID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GenreID"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("GenreID");

                    b.ToTable("CinematographyGenres");
                });

            modelBuilder.Entity("Cinema_World.Models.CinematographyModel", b =>
                {
                    b.Property<int>("CinematographyID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CinematographyID"), 1L, 1);

                    b.Property<int>("DirectorID")
                        .HasColumnType("int");

                    b.Property<int>("GenreID")
                        .HasColumnType("int");

                    b.Property<double>("IMDbScore")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ReleaseYear")
                        .HasColumnType("int");

                    b.Property<string>("ShortDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CinematographyID");

                    b.HasIndex("DirectorID");

                    b.HasIndex("GenreID");

                    b.ToTable("Cinematography");
                });

            modelBuilder.Entity("Cinema_World.Models.DirectorModel", b =>
                {
                    b.Property<int>("DirectorID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DirectorID"), 1L, 1);

                    b.Property<string>("BirthPlace")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("BirthYear")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MiddleName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DirectorID");

                    b.ToTable("Directors");
                });

            modelBuilder.Entity("Cinema_World.Models.Writer_CinematographyModel", b =>
                {
                    b.Property<int>("WriterID")
                        .HasColumnType("int");

                    b.Property<int>("CinematographyID")
                        .HasColumnType("int");

                    b.HasKey("WriterID", "CinematographyID");

                    b.HasIndex("CinematographyID");

                    b.ToTable("Writers_Cinematography");
                });

            modelBuilder.Entity("Cinema_World.Models.WriterModel", b =>
                {
                    b.Property<int>("WriterID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WriterID"), 1L, 1);

                    b.Property<string>("BirthPlace")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("BirthYear")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MiddleName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("WriterID");

                    b.ToTable("Writers");
                });

            modelBuilder.Entity("Cinema_World.Models.Actor_CinematographyModel", b =>
                {
                    b.HasOne("Cinema_World.Models.ActorModel", "Actor")
                        .WithMany("Actors_Cinematography")
                        .HasForeignKey("ActorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cinema_World.Models.CinematographyModel", "Cinematography")
                        .WithMany("Actors_Cinematography")
                        .HasForeignKey("CinematographyID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Actor");

                    b.Navigation("Cinematography");
                });

            modelBuilder.Entity("Cinema_World.Models.CinematographyCategory_CinematographyModel", b =>
                {
                    b.HasOne("Cinema_World.Models.CinematographyCategoryModel", "Category")
                        .WithMany("CinematographyCategories_Cinematography")
                        .HasForeignKey("CinematographyCategoryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cinema_World.Models.CinematographyModel", "Cinematography")
                        .WithMany("CinematographyCategories_Cinematography")
                        .HasForeignKey("CinematographyID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Cinematography");
                });

            modelBuilder.Entity("Cinema_World.Models.CinematographyModel", b =>
                {
                    b.HasOne("Cinema_World.Models.DirectorModel", "Director")
                        .WithMany("Cinematography")
                        .HasForeignKey("DirectorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cinema_World.Models.CinematographyGenreModel", "Genre")
                        .WithMany("Cinematography")
                        .HasForeignKey("GenreID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Director");

                    b.Navigation("Genre");
                });

            modelBuilder.Entity("Cinema_World.Models.Writer_CinematographyModel", b =>
                {
                    b.HasOne("Cinema_World.Models.CinematographyModel", "Cinematography")
                        .WithMany("Writers_Cinematography")
                        .HasForeignKey("CinematographyID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cinema_World.Models.WriterModel", "Writer")
                        .WithMany("Writers_Cinematography")
                        .HasForeignKey("WriterID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cinematography");

                    b.Navigation("Writer");
                });

            modelBuilder.Entity("Cinema_World.Models.ActorModel", b =>
                {
                    b.Navigation("Actors_Cinematography");
                });

            modelBuilder.Entity("Cinema_World.Models.CinematographyCategoryModel", b =>
                {
                    b.Navigation("CinematographyCategories_Cinematography");
                });

            modelBuilder.Entity("Cinema_World.Models.CinematographyGenreModel", b =>
                {
                    b.Navigation("Cinematography");
                });

            modelBuilder.Entity("Cinema_World.Models.CinematographyModel", b =>
                {
                    b.Navigation("Actors_Cinematography");

                    b.Navigation("CinematographyCategories_Cinematography");

                    b.Navigation("Writers_Cinematography");
                });

            modelBuilder.Entity("Cinema_World.Models.DirectorModel", b =>
                {
                    b.Navigation("Cinematography");
                });

            modelBuilder.Entity("Cinema_World.Models.WriterModel", b =>
                {
                    b.Navigation("Writers_Cinematography");
                });
#pragma warning restore 612, 618
        }
    }
}
