// <auto-generated />
using System;
using Cinema_World.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Cinema_World.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20221103235438_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Cinema_World.Models.Actor_CinematographyModel", b =>
                {
                    b.Property<int>("ActorID")
                        .HasColumnType("int");

                    b.Property<int>("CinematographyID")
                        .HasColumnType("int");

                    b.HasKey("ActorID", "CinematographyID");

                    b.HasIndex("CinematographyID");

                    b.ToTable("Actor_Cinematographys");
                });

            modelBuilder.Entity("Cinema_World.Models.ActorModel", b =>
                {
                    b.Property<int>("ActorID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ActorID"), 1L, 1);

                    b.Property<int>("BirthYear")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ActorID");

                    b.ToTable("Actors");
                });

            modelBuilder.Entity("Cinema_World.Models.CinematographyModel", b =>
                {
                    b.Property<int>("CinematographyID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CinematographyID"), 1L, 1);

                    b.Property<int>("Category")
                        .HasColumnType("int");

                    b.Property<int>("DirectorID")
                        .HasColumnType("int");

                    b.Property<int>("Genre")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ReleaseDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ShortDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("WriterID")
                        .HasColumnType("int");

                    b.HasKey("CinematographyID");

                    b.HasIndex("DirectorID");

                    b.HasIndex("WriterID");

                    b.ToTable("Cinematography");
                });

            modelBuilder.Entity("Cinema_World.Models.DirectorModel", b =>
                {
                    b.Property<int>("DirectorID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DirectorID"), 1L, 1);

                    b.Property<int>("BirthYear")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MoviesDirected")
                        .HasColumnType("int");

                    b.Property<int>("SeriesDirected")
                        .HasColumnType("int");

                    b.HasKey("DirectorID");

                    b.ToTable("Directors");
                });

            modelBuilder.Entity("Cinema_World.Models.WriterModel", b =>
                {
                    b.Property<int>("WriterID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WriterID"), 1L, 1);

                    b.Property<int>("BirthYear")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MoviesWritten")
                        .HasColumnType("int");

                    b.Property<int>("SeriesWritten")
                        .HasColumnType("int");

                    b.HasKey("WriterID");

                    b.ToTable("Writers");
                });

            modelBuilder.Entity("Cinema_World.Models.Actor_CinematographyModel", b =>
                {
                    b.HasOne("Cinema_World.Models.ActorModel", "Actor")
                        .WithMany("Actors_Cinematography")
                        .HasForeignKey("ActorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cinema_World.Models.CinematographyModel", "Cinematography")
                        .WithMany("Actors_Cinematography")
                        .HasForeignKey("CinematographyID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Actor");

                    b.Navigation("Cinematography");
                });

            modelBuilder.Entity("Cinema_World.Models.CinematographyModel", b =>
                {
                    b.HasOne("Cinema_World.Models.DirectorModel", "Director")
                        .WithMany("Cinematography")
                        .HasForeignKey("DirectorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cinema_World.Models.WriterModel", "Writer")
                        .WithMany("Cinematography")
                        .HasForeignKey("WriterID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Director");

                    b.Navigation("Writer");
                });

            modelBuilder.Entity("Cinema_World.Models.ActorModel", b =>
                {
                    b.Navigation("Actors_Cinematography");
                });

            modelBuilder.Entity("Cinema_World.Models.CinematographyModel", b =>
                {
                    b.Navigation("Actors_Cinematography");
                });

            modelBuilder.Entity("Cinema_World.Models.DirectorModel", b =>
                {
                    b.Navigation("Cinematography");
                });

            modelBuilder.Entity("Cinema_World.Models.WriterModel", b =>
                {
                    b.Navigation("Cinematography");
                });
#pragma warning restore 612, 618
        }
    }
}
